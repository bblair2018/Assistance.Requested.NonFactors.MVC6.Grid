@{
    ViewData["Title"] = "Try It Out Naked!";
}

@*https://liftcodeplay.com/2017/02/14/using-asp-net-core-and-jquery-to-call-methods-via-ajax/*@
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="robots" content="noindex, nofollow">

    <title>&quot;Waiting for...&quot; modal dialog - Bootsnipp.com</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
    <style type="text/css">
    </style>
    <script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.0/js/bootstrap.min.js"></script>
    <script type="text/javascript">
        window.alert = function () { };
        var defaultCSS = document.getElementById('bootstrap-css');
        function changeCSS(css) {
            if (css) $('head > link').filter(':first').replaceWith('<link rel="stylesheet" href="' + css + '" type="text/css" />');
            else $('head > link').filter(':first').replaceWith(defaultCSS);
        }
        $(document).ready(function () {
            var iframe_height = parseInt($('html').height());
            window.parent.postMessage(iframe_height, 'https://bootsnipp.com');
        });
    </script>
</head>
<body>
    <div class="container">
        <div class="row">
            <h2>"Waiting for..." modal dialog with progress bar</h2>
            <p>
                If you need to block a user screen while loading some data or doing heavy computations,
                you can use this snippet to show modal dialog with progress bar.
            </p>
            <p>Fork it on <a href="https://github.com/ehpc/bootstrap-waitingfor">github</a></p>
            <h2>Examples <small>All dialogs will be automatically closed after 2 seconds</small></h2>

            <h3>Simple dialog</h3>
            <pre>waitingDialog.show();</pre>
            <button type="button" class="btn btn-primary" onclick="waitingDialog.show();setTimeout(function () {waitingDialog.hide();}, 3000);">Show dialog</button>

            <h3>Dialog with custom message</h3>
            <pre>waitingDialog.show('Custom message');</pre>
            <button type="button" class="btn btn-success" onclick="waitingDialog.show('Custom message');setTimeout(function () {waitingDialog.hide();}, 2000);">Show dialog</button>

            <h3>Dialog with custom settings</h3>
            <pre>waitingDialog.show('Custom message', {dialogSize: 'sm', progressType: 'warning'});</pre>
            <button type="button" class="btn btn-warning" onclick="waitingDialog.show('Custom message', {dialogSize: 'sm', progressType: 'warning'});setTimeout(function () {waitingDialog.hide();}, 2000);">Show dialog</button>

            <h3>Dialog with some callback firing after it was hidden</h3>
            <pre>waitingDialog.show('Dialog with callback on hidden',{onHide: function () {alert('Callback!');});</pre>

            <h3>Now do some work...</h3>
            <button type="button" class="btn btn-warning" onclick="waitingDialog.show('Custom message', { dialogSize: 'sm', progressType: 'warning' }); myFunction0('I love writing in javaScript!');">Simple Pass String</button>
            <p id="demo"></p>

            <button type="button" class="btn btn-warning" onclick="crap();">CRAP</button>
            <p id="demo"></p>

            <h3>Send that awesome email...</h3>
            <button type="button" class="btn btn-danger" onclick="waitingDialog.show('Rendering that beautiful email...', { dialogSize: 'm', progressType: 'success' }); myFunction2();">Simulate Email</button>
            <p>@ViewData["Message"]</p>
            
        </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
    <script>

            function crap() {
                var txt;
                if (confirm("Press a button!") == true) {
                    txt = "You pressed OK!";
                } else {
                    txt = "You pressed Cancel!";
                }
                document.getElementById("demo").innerHTML = txt;
            }

            function myFunction0(message) {

                document.getElementById("demo").innerHTML = "";
                sleep(2000).then(() => {
                    document.getElementById("demo").innerHTML = message;
                    waitingDialog.hide();
                })

            }

            //This is not used, consider removing it.
            function myFunction1() {

                document.getElementById("demo").innerHTML = "";
                sleep(2000).then(() => {
                    document.getElementById("demo").innerHTML = "I am done processing a lot of work!";
                    waitingDialog.hide();
                })

            }

            function myFunction2(message) {

                $.ajax({
                    type: "GET",
                    url: "/House/Index",
                    data: "{Hello...}",
                    async: true,
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        if (response == true) {
                            waitingDialog.hide();
                            confirm("AJAX request successfully completed");
                        }
                    },
                    failure: function (data) {
                        waitingDialog.hide();
                        alert(data.responseText);
                        confirm("FAILED: " + data.responseText);
                    }, //End of AJAX failure function  
                    error: function (data) {
                        waitingDialog.hide();
                        alert(data.responseText);
                        confirm("ERROR: " + data.responseText);
                    } //End of AJAX error function  
                });
            }

            //function myFunction2(message) {

            //    $.ajax({
            //        type: "POST",
            //        url: "/House/Index",
            //        contentType: "application/json; charset=utf-8",
            //        dataType: "json",
            //        success: waitingDialog.hide(),
            //        failure: function (data) {
            //            alert(data.responseText);
            //        }, //End of AJAX failure function  
            //        error: function (data) {
            //            alert(data.responseText);
            //        } //End of AJAX error function  
            //    });

            //}

            function sleep(time) {
                return new Promise((resolve) => setTimeout(resolve, time));
            }

            @*/**
             * Module for displaying "Waiting for..." dialog using Bootstrap
             *
             * @author Eugene Maslovich <ehpc@em42.ru>
             */*@

            var waitingDialog = waitingDialog || (function ($) {
                'use strict';

	            // Creating modal dialog's DOM
	            var $dialog = $(
		            '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
		            '<div class="modal-dialog modal-m">' +
		            '<div class="modal-content">' +
			            '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
			            '<div class="modal-body">' +
				            '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
			            '</div>' +
		            '</div></div></div>');

	            return {
		            @*/**
		             * Opens our dialog
		             * @param message Custom message
		             * @param options Custom options:
		             * 				  options.dialogSize - bootstrap postfix for dialog size, e.g. "sm", "m";
		             * 				  options.progressType - bootstrap postfix for progress bar type, e.g. "success", "warning".
		             */*@
		            show: function (message, options) {
			            // Assigning defaults
			            if (typeof options === 'undefined') {
				            options = {};
			            }
			            if (typeof message === 'undefined') {
				            message = 'Loading';
			            }
			            var settings = $.extend({
				            dialogSize: 'm',
				            progressType: '',
				            onHide: null // This callback runs after the dialog was hidden
			            }, options);

			            // Configuring dialog
			            $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
			            $dialog.find('.progress-bar').attr('class', 'progress-bar');
			            if (settings.progressType) {
				            $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
			            }
			            $dialog.find('h3').text(message);
			            // Adding callbacks
			            if (typeof settings.onHide === 'function') {
				            $dialog.off('hidden.bs.modal').on('hidden.bs.modal', function (e) {
					            settings.onHide.call($dialog);
				            });
			            }
			            // Opening dialog
			            $dialog.modal();
		            },
		            /**
		             * Closes dialog
		             */
		            hide: function () {
			            $dialog.modal('hide');
		            }
	            };

            })(jQuery);

    </script>
</body>
</html>